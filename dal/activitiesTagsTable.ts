import sql = require('mssql');
import dbg =require('debug');
import h = require('../helpers/misc');
import odataV4Sql= require('odata-v4-sql');
import {SqlTableType} from './sqlTableType';

const debug= dbg('todo:todosTable');

export class ActivitiesTagsTable extends SqlTableType {
  constructor(connectionPool: sql.ConnectionPool) {
    const activityTagsFields: h.Helpers.SqlField[] = [
      new h.Helpers.SqlField({ name: 'id', type: sql.BigInt }),
      new h.Helpers.SqlField({ name: 'activityId', type: sql.BigInt }),
      new h.Helpers.SqlField({ name: 'tagId', type: sql.BigInt }),
      new h.Helpers.SqlField({ name: 'modifiedOn', type: sql.DateTime }),
    ];

    super({ connectionPool: connectionPool, tableName: 'ActivitiesTagsBase', viewName: 'ActivitiesTags', fields: activityTagsFields, autoGeneratedPrimaryKey: true, throwOnExtraFields: false });
    debug.enabled = true;
  }

  async customUpdateChecks(jsonBody: any) {
    if (!jsonBody.activityId) { 
      throw new Error(`Body is missing the field 'activityId'`);
    }

    if (!jsonBody.tagId) {
      throw new Error(`Body is missing the field 'tagId'`);
    }
    return;
  }
  async customInsertChecks(jsonBody: any) {
    await this.customUpdateChecks(jsonBody);
    const tagFields: h.Helpers.SqlField[] = [
      new h.Helpers.SqlField({ name: 'id', type: sql.BigInt }),
      new h.Helpers.SqlField({ name: 'title', type: sql.NVarChar(100) }),
      new h.Helpers.SqlField({ name: 'sortId', type: sql.Int }),
      new h.Helpers.SqlField({ name: 'modifiedOn', type: sql.DateTime }),
    ];
    const tagsTable: SqlTableType = new SqlTableType({ connectionPool: this.connectionPool, tableName: 'tags', viewName: 'tags', fields: tagFields, autoGeneratedPrimaryKey: true, throwOnExtraFields: true });
    let tag = await tagsTable.getById(jsonBody.tagId);
    if(!tag){ // checking that it is a valid tag
      throw new Error(`Could not find '${tagsTable.viewName}' with the id: '${jsonBody.tagId}'.`);
    }
    let reqUrl = `$filter=(activityId eq ${jsonBody.activityId} and tagId eq ${jsonBody.tagId})`;
    let rslt = await this.getAll(reqUrl); // checking that there are no doubel inserts
    if(!!rslt && rslt.length!=0){
      throw new Error(`An item with given identifier already exists.`);
    }
    
  }
}