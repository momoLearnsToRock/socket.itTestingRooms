import sql = require('mssql');
import dbg = require('debug');
import {Helpers} from '../helpers/misc';
import odataV4Sql = require('odata-v4-sql');
import { SqlTableType } from './sqlTableType';

const debug = dbg('todo:activityCardsTable');

export class ActivityCardsTable extends SqlTableType {
  constructor(connectionPool: sql.ConnectionPool) {
    const activityCardsFields: Helpers.SqlField[] = [
      new Helpers.SqlField({ name: 'id', type: sql.BigInt }),
      new Helpers.SqlField({ name: 'activityId', type: sql.BigInt }),
      new Helpers.SqlField({ name: 'notes', type: sql.NVarChar(sql.MAX) }),
      new Helpers.SqlField({ name: 'cardType', type: sql.NVarChar(50) }),
      new Helpers.SqlField({ name: 'input', type: sql.NVarChar(sql.MAX) }),
      new Helpers.SqlField({ name: 'outputText', type: sql.NVarChar(sql.MAX) }),
      new Helpers.SqlField({ name: 'modifiedOn', type: sql.DateTime }),
    ];

    super({ connectionPool: connectionPool, tableName: 'ActivityCardsBase', viewName: 'ActivityCardsBase', fields: activityCardsFields, autoGeneratedPrimaryKey: true, throwOnExtraFields: true });
    debug.enabled = true;
  }

  // async customUpdateChecks(jsonBody: any) {
  //   if (typeof jsonBody.cardType != 'undefined' && !Object.values(Helpers.CardTypes).includes(jsonBody.cardType))
  //     throw new Error(`the field 'cardType' has an invalid value.`);
  //   return;
  // }
  // async customInsertChecks(jsonBody: any) {
  //   if (typeof jsonBody.cardType != 'undefined' && !Object.values(Helpers.CardTypes).includes(jsonBody.cardType))
  //   throw new Error(`the field 'cardType' has an invalid value.`);
  //   return;
  // }
}