import sql = require('mssql');
import dbg = require('debug');
import { Helpers } from '../helpers/misc';
import { SqlTableType } from './sqlTableType';

const debug = dbg('todo:cardTypesTable');

export class CardTypesTable extends SqlTableType {
  constructor(connectionPool: sql.ConnectionPool) {
    const cardTypesFields: Helpers.SqlField[] = [
      new Helpers.SqlField({ name: "id", type: sql.NChar(4) }),
      new Helpers.SqlField({ name: "title", type: sql.NVarChar(255) }),
      new Helpers.SqlField({ name: "modifiedOn", type: sql.DateTime })
    ];

    super({ connectionPool: connectionPool, tableName: 'CardTypes', viewName: 'CardTypes', fields: cardTypesFields, autoGeneratedPrimaryKey: false, throwOnExtraFields: true });
    debug.enabled = true;
  }

  async customUpdateChecks(jsonBody: any) {
    if (jsonBody.id && jsonBody.id.toUpperCase() != jsonBody.id) //key for this table should always be uppercase
      throw new Error(`the field 'id' has an invalid value.`);
    return;
  }
  async customInsertChecks(jsonBody: any) {
    if (jsonBody.id && jsonBody.id.toUpperCase() != jsonBody.id) //key for this table should always be uppercase
      throw new Error(`the field 'id' has an invalid value.`);
    return;
  }
}